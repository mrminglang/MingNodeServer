// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 8.0.17_20200923091552 by TAF Team.
// Generated from `./MingNodeServer.jce'
// **********************************************************************

/* eslint-disable */

var TafStream = require('@taf/taf-stream');
var TafError  = require('@taf/taf-rpc').error;

if (TafStream.JceStruct == undefined) {
    TafStream.JceStruct = function() {
        this._jce_double_precision_ = -1;
    }
    TafStream.JceStruct.prototype.setPrecision = function(d) {
        if ((d == -1) || (d >= 0 && d <= 15)) {
            this._jce_double_precision_ = d;
            return true;
        }
        return false;
    }
    TafStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
    TafStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
    TafStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}

var MingApp = MingApp || {};
module.exports.MingApp = MingApp;

MingApp.MingNodeServerProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

MingApp.MingNodeServerProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

MingApp.MingNodeServerProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


MingApp.MingNodeServerProxy.prototype.mingHello = function (s) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, s);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.r = is.readString(2, true, TafStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('mingHello', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



